/**
 * Setup command - Initialize git hooks and project configuration
 */

import { existsSync, mkdirSync, writeFileSync, chmodSync } from 'fs'
import { join } from 'path'
import { Logger } from '../../lib/logger.js'
import * as readline from 'readline/promises'

export interface SetupOptions {
  quiet?: boolean
  debug?: boolean
  force?: boolean
  branch?: string
}

const PRE_PUSH_HOOK_TEMPLATE = `#!/bin/bash
# secure-deploy pre-push hook
# Auto-generated by secure-deploy CLI

# Get the branch being pushed
branch=$(git symbolic-ref --short HEAD 2>/dev/null)

# Check if this is the deployment branch
DEPLOY_BRANCH="{{DEPLOY_BRANCH}}"

if [[ "$branch" == "$DEPLOY_BRANCH" ]]; then
  echo ""
  echo "üöÄ secure-deploy: Auto-deploying $branch branch..."
  echo ""

  # Check if build directory exists
  if [ ! -d "{{BUILD_DIR}}" ]; then
    echo "‚ö†Ô∏è  Build directory not found. Running build..."
    npm run build

    if [ $? -ne 0 ]; then
      echo "‚ùå Build failed. Push cancelled."
      exit 1
    fi
  fi

  # Run deployment
  npx secure-deploy deploy {{BUILD_DIR}}

  # Check if deployment succeeded
  if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå Deployment failed. Push cancelled."
    echo "   Fix the errors above and try again."
    exit 1
  fi

  echo ""
  echo "‚úÖ Deployment proposal created!"
  echo "   Approve in Safe UI to complete deployment."
  echo ""
fi

exit 0
`

/**
 * Setup git hooks for automatic deployment
 */
export async function setupCommand(options: SetupOptions): Promise<void> {
  const logger = new Logger({ quiet: options.quiet, debug: options.debug })

  logger.header('‚öôÔ∏è  Setup secure-deploy')
  logger.newline()

  // Check if we're in a git repository
  if (!existsSync('.git')) {
    logger.error('Not a git repository')
    logger.log('Run this command in the root of your git repository')
    process.exit(1)
  }

  logger.section('üìã Configuration')
  logger.newline()

  // Interactive setup
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  // Ask for deployment branch
  const deployBranch = options.branch || await rl.question('Which branch should trigger deployments? [staging]: ') || 'staging'

  // Ask for build directory
  const buildDir = await rl.question('Build output directory? [dist]: ') || 'dist'

  rl.close()

  logger.newline()
  logger.log('Configuration:')
  logger.log(`  Deployment branch: ${deployBranch}`)
  logger.log(`  Build directory: ${buildDir}`)
  logger.newline()

  // Confirm
  const rl2 = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  const confirm = await rl2.question('Install git hooks? [y/N]: ')
  rl2.close()

  if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
    logger.log('Setup cancelled')
    return
  }

  logger.newline()

  // Create hooks directory if it doesn't exist
  const hooksDir = join(process.cwd(), '.git', 'hooks')
  if (!existsSync(hooksDir)) {
    mkdirSync(hooksDir, { recursive: true })
  }

  // Generate pre-push hook
  const hookContent = PRE_PUSH_HOOK_TEMPLATE
    .replace(/\{\{DEPLOY_BRANCH\}\}/g, deployBranch)
    .replace(/\{\{BUILD_DIR\}\}/g, buildDir)

  const hookPath = join(hooksDir, 'pre-push')

  // Check if hook already exists
  if (existsSync(hookPath) && !options.force) {
    logger.warn('pre-push hook already exists')
    logger.log('Use --force to overwrite')
    process.exit(1)
  }

  // Write hook file
  const spinner = logger.spinner('Installing git hooks...')
  spinner.start()

  try {
    writeFileSync(hookPath, hookContent, { mode: 0o755 })
    chmodSync(hookPath, 0o755)

    spinner.succeed('Git hooks installed')
    logger.newline()

    // Success!
    logger.header('‚úÖ Setup Complete!')
    logger.newline()

    logger.log('Git hook installed:')
    logger.log(`  ${hookPath}`)
    logger.newline()

    logger.section('üöÄ How to use')
    logger.log(`When you push to the "${deployBranch}" branch:`)
    logger.log('  1. The hook will automatically run the deployment')
    logger.log('  2. A Safe proposal will be created')
    logger.log('  3. You\'ll see the Safe URL in your terminal')
    logger.log('  4. Approve in Safe UI to complete deployment')
    logger.newline()

    logger.section('üìù Example workflow')
    logger.log('  git add .')
    logger.log('  git commit -m "Update frontend"')
    logger.log(`  git push origin ${deployBranch}  # Auto-deploys!`)
    logger.newline()

    logger.section('üîß Managing hooks')
    logger.log('  View hook: cat .git/hooks/pre-push')
    logger.log('  Remove hook: rm .git/hooks/pre-push')
    logger.log('  Reinstall: npx secure-deploy setup --force')
    logger.newline()

  } catch (error: any) {
    spinner.fail()
    logger.error(`Failed to install hooks: ${error.message}`)
    process.exit(1)
  }
}
